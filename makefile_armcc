#**********************************************************#
#file     makefile
#author   Rajmund Szymanski
#date     17.02.2016
#brief    STM32F0xx makefile.
#**********************************************************#

ARMCC      := c:/sys/arm/armcc/bin/
GNUCC      := c:/sys/gcc/bin/arm-none-eabi-
OPENOCD    := c:/sys/tools/openocd/bin-x64/openocd

#----------------------------------------------------------#

PROJECT    ?=
DEFS       ?= __MICROLIB
LIBS       ?=
DIRS       ?=
KEYS       ?=
INCS       ?=
OUTDIR     ?=
SCRIPT     ?=

#----------------------------------------------------------#

DEFS       += STM32F051x8
KEYS       += .arm *

#----------------------------------------------------------#

AS         := $(ARMCC)armasm
CC         := $(ARMCC)armcc
CXX        := $(ARMCC)armcc
COPY       := $(ARMCC)fromelf
DUMP       := $(ARMCC)fromelf
SIZE       := $(GNUCC)size
LD         := $(ARMCC)armlink
AR         := $(ARMCC)armar

MD         := mkdir
RM         ?= rm -f

#----------------------------------------------------------#

DTREE       = $(foreach d,$(foreach k,$(KEYS),$(wildcard $1$k)),$(dir $d) $(call DTREE,$d/))

VPATH      := $(sort $(call DTREE,) $(foreach d,$(DIRS),$(call DTREE,$d/)))

#----------------------------------------------------------#

AS_EXT     := .s
C_EXT      := .c
CXX_EXT    := .cpp

INC_DIRS   := $(sort $(dir $(foreach d,$(VPATH),$(wildcard $d*.h $d*.hpp))))
LIB_DIRS   := $(sort $(dir $(foreach d,$(VPATH),$(wildcard $d*.lib))))
MAKE_FILES :=     $(notdir $(foreach d,$(VPATH),$(wildcard $d*makefile* $d*.mk)))
AS_SRCS    :=     $(notdir $(foreach d,$(VPATH),$(wildcard $d*$(AS_EXT))))
C_SRCS     :=     $(notdir $(foreach d,$(VPATH),$(wildcard $d*$(C_EXT))))
CXX_SRCS   :=     $(notdir $(foreach d,$(VPATH),$(wildcard $d*$(CXX_EXT))))
LIB_SRCS   :=     $(notdir $(foreach d,$(VPATH),$(wildcard $d*.lib)))
ifeq ($(SCRIPT),)
SCRIPT     :=  $(firstword $(foreach d,$(VPATH),$(wildcard $d*.sct)))
else
SCRIPT     :=  $(firstword $(foreach d,$(VPATH),$(wildcard $d$(SCRIPT))))
endif
ifeq ($(PROJECT),)
PROJECT    :=     $(notdir $(CURDIR))
endif
ifeq ($(OUTDIR),)
OUTDIR     := _output
endif

#----------------------------------------------------------#

BIN        := $(OUTDIR)/$(PROJECT).bin
ELF        := $(OUTDIR)/$(PROJECT).axf
FED        := $(OUTDIR)/$(PROJECT).fed
HEX        := $(OUTDIR)/$(PROJECT).hex
HTM        := $(OUTDIR)/$(PROJECT).htm
LIB        := $(OUTDIR)/$(PROJECT).lib
LSS        := $(OUTDIR)/$(PROJECT).lss
MAP        := $(OUTDIR)/$(PROJECT).map

OBJS       := $(AS_SRCS:%$(AS_EXT)=$(OUTDIR)/%.o)
OBJS       += $(C_SRCS:%$(C_EXT)=$(OUTDIR)/%.o)
OBJS       += $(CXX_SRCS:%$(CXX_EXT)=$(OUTDIR)/%.o)
CRFS       := $(OBJS:.o=.crf)
DEPS       := $(OBJS:.o=.d)
LSTS       := $(OBJS:.o=.lst)
TXTS       := $(OBJS:.o=.txt)

#----------------------------------------------------------#

CORE_F     := --cpu=cortex-m0 --apcs=/interwork

COMMON_F    = # --debug
COMMON_F   += --md --depend=$(@:.o=.d)

OPTIM_F    := -Ospace --split_sections --interleave

AS_FLAGS    = # --list=$(@:.o=.lst)
C_FLAGS     = --c99
C_FLAGS    += # --asm --asm_dir=$(OUTDIR) # --list --list_dir=$(OUTDIR)
CXX_FLAGS   = --cpp11
CXX_FLAGS  += # --asm --asm_dir=$(OUTDIR) # --list --list_dir=$(OUTDIR)
LD_FLAGS    = --strict --scatter=$(SCRIPT) --symbols --list_mapping_symbols
LD_FLAGS   += --map --info common,sizes,summarysizes,totals,veneers,unused --list=$(MAP) # --callgraph

#----------------------------------------------------------#

ifneq ($(CXX_SRCS),)
DEFS       += __USES_CXX
endif
ifneq ($(filter __MICROLIB,$(DEFS)),)
LD_FLAGS   += --library_type=microlib
endif

#----------------------------------------------------------#

empty=
comma=,
space=$(empty) $(empty)
clist=$(subst $(space),$(comma),$(strip $1))

#----------------------------------------------------------#

ARM_INC    := $(ARMCC)../include
ARM_LIB    := $(ARMCC)../lib

DEFS_F     := $(DEFS:%=-D%)
LIBS_F     := $(LIBS:%=%.lib)
LIBS_F     += $(LIB_SRCS)

INC_DIRS   += $(INCS:%=%/)
INC_DIRS   += $(ARMCC)../../RV31/INC/
INC_DIRS_F := $(INC_DIRS:%=-I%)
LIB_DIRS   += $(ARMCC)../../RV31/LIB/
LIB_DIRS_F := --libpath=$(ARM_LIB)
LIB_DIRS_F += --userlibpath=$(call clist, $(LIB_DIRS))

AS_FLAGS   += # $(foreach d,$(DEFS),$(if $(findstring =,$d),--pd="$(subst =, SETA ,$d)",--pd="$d SETA 1"))
AS_FLAGS   += --cpreproc --cpreproc_opts=$(call clist,$(DEFS_F) $(INC_DIRS_F))
LD_FLAGS   += $(DEFS_F:%=--pd=%) $(INC_DIRS_F:%=--pd=%)

AS_FLAGS   += $(CORE_F) $(COMMON_F)
C_FLAGS    += $(CORE_F) $(COMMON_F) $(DEFS_F) $(INC_DIRS_F) $(OPTIM_F)
CXX_FLAGS  += $(CORE_F) $(COMMON_F) $(DEFS_F) $(INC_DIRS_F) $(OPTIM_F)
LD_FLAGS   += $(CORE_F)

#----------------------------------------------------------#

#openocd command-line
#interface and board/target settings (using the OOCD target-library here)
OOCD_INIT  := -f board/stm32f0discovery.cfg
OOCD_INIT  += -c init
OOCD_INIT  += -c targets
#commands to enable semihosting
OOCD_DEBG  := -c "arm semihosting enable"
#commands to prepare flash-write
OOCD_SAVE  := -c "reset halt"
#flash-write and -verify
OOCD_SAVE  += -c "flash write_image erase $(ELF)"
OOCD_SAVE  += -c "verify_image $(ELF)"
#reset target
OOCD_EXEC  := -c "reset run"
#terminate OOCD after programming
OOCD_EXIT  := -c shutdown

#----------------------------------------------------------#

all : make_output_dir $(LSS) print_size print_elf_size

lib : make_output_dir $(LIB) print_size

$(ELF) : $(OBJS) $(SCRIPT)
	$(info Linking target: $(ELF))
ifeq ($(SCRIPT),)
	$(error No scatter file in project)
endif
	$(LD) $(LD_FLAGS) $(OBJS) $(LIBS_F) $(LIB_DIRS_F) -o $@

$(LIB) : $(OBJS)
	$(info Building library: $(LIB))
	$(AR) --create $@ $?

$(OBJS) : $(MAKE_FILES)

$(OUTDIR)/%.o : %$(AS_EXT)
	$(info Assembling file: $<)
	$(AS) $(AS_FLAGS) $< -o $@

$(OUTDIR)/%.o : %$(C_EXT)
	$(info Compiling file: $<)
	$(CC) $(C_FLAGS) -c $< -o $@

$(OUTDIR)/%.o : %$(CXX_EXT)
	$(info Compiling file: $<)
	$(CXX) $(CXX_FLAGS) -c $< -o $@

$(BIN) : $(ELF)
	$(info Creating BIN image: $(BIN))
	$(COPY) $< --bincombined --output $@

$(HEX) : $(ELF)
	$(info Creating HEX image: $(HEX))
	$(COPY) $< --i32combined --output $@

$(LSS) : $(ELF)
	$(info Creating extended listing: $(LSS))
	$(DUMP) $< --text -c -z --output $@

print_size :
	$(info Size of modules:)
	$(SIZE) -B -t --common $(OBJS)

print_elf_size :
	$(info Size of target file:)
	$(SIZE) -B $(ELF)

make_output_dir :
ifeq      ($(wildcard $(OUTDIR)),)
	$(info Creating output directory: $(OUTDIR))
	$(MD) $(OUTDIR)
endif

GENERATED = $(BIN) $(ELF) $(FED) $(HEX) $(HTM) $(LIB) $(LSS) $(MAP) $(CRFS) $(DEPS) $(LSTS) $(OBJS) $(TXTS)

clean :
ifeq      ($(wildcard $(OUTDIR)),)
	$(info Nothing to clean...)
else ifeq ($(sort $(wildcard $(OUTDIR)/*)),$(sort $(wildcard $(GENERATED))))
	$(info Removing output directory: $(OUTDIR))
	$(RM)dr $(OUTDIR)
else ifeq ($(wildcard $(GENERATED)),)
	$(info Nothing to clean...)
else
	$(info Removing all generated output files)
	$(RM) $(GENERATED)
endif

flash : all
	$(info Programing device...)
	$(OPENOCD) $(OOCD_INIT) $(OOCD_SAVE) $(OOCD_EXEC) $(OOCD_EXIT)

debug : all
	$(info Debugging device...)
	$(OPENOCD) $(OOCD_INIT) $(OOCD_SAVE) $(OOCD_DEBG) $(OOCD_EXEC)

reset :
	$(info Reseting device...)
	$(OPENOCD) $(OOCD_INIT) $(OOCD_EXEC) $(OOCD_EXIT)

.PHONY : all lib clean flash debug reset

-include $(DEPS)
